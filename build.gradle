plugins {
    id 'java'
}

group 'net.cassite'
version loadVersion()

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    // provided group: 'org.graalvm.sdk', name: 'graal-sdk', version: '1.0.0-rc12'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

jar {
    manifest {
        attributes 'Main-Class': 'net.cassite.vproxy.app.Main'
    }
}

def loadVersion() {
    def PREFIX = "this.version = \""
    def SUFFIX = "\"; // _THE_VERSION_"
    def ver = file(sourceSets.main.java.srcDirs[0].path + "/net/cassite/vproxy/app/Application.java")
    def lines = ver.getText().split("\n")
    for (def line : lines) {
        line = line.trim()
        if (line.startsWith(PREFIX) && line.endsWith(SUFFIX)) {
            return line.substring(PREFIX.length(), line.length() - SUFFIX.length())
        }
    }
    return "unknown"
}

task nativeImage(type: Exec, description: "build native image") {
    dependsOn 'jar'

    workingDir buildDir.path + "/libs"

    def reflectconfig = sourceSets.main.resources.srcDirs[0].path + "/reflectconfig.json"

    def command = ["native-image",
                   "-H:ReflectionConfigurationFiles=" + reflectconfig,
                   "-D+A:UseDatagramChannel=false",
                   "-jar",
                   project.name + "-" + version + ".jar"]
    //noinspection GroovyAssignabilityCheck
    commandLine command
}

// make sure you are running MacOS and has a docker image called `native-image-pack`
// graalvm is in `/graalvm` inside the image
// also note that, all stopped containers will be removed
task nativeImageAll(type: Exec, description: "build macos and linux images") {
    dependsOn 'jar'

    def libdir = buildDir.path + "/libs"
    def resourcespath = sourceSets.main.resources.srcDirs[0].path
    def deppath = projectDir.path + "/dep"
    def name = project.name + "-" + version

    def command = ["/bin/bash",
                   resourcespath + "/nativeImageAll.sh",
                   libdir, resourcespath, deppath, name]
    //noinspection GroovyAssignabilityCheck
    commandLine command
}

task stage(dependsOn: ['clean', 'jar'])
jar.mustRunAfter clean
